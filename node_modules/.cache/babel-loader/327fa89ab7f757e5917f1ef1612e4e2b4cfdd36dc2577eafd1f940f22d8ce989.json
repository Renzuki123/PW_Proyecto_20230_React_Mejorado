{"ast":null,"code":"var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Create handlers that pass events from native requests\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\nvar InvalidUrlError = createErrorType(\"ERR_INVALID_URL\", \"Invalid URL\", TypeError);\n// Error types with codes\nvar RedirectionError = createErrorType(\"ERR_FR_REDIRECTION_FAILURE\", \"Redirected request failed\");\nvar TooManyRedirectsError = createErrorType(\"ERR_FR_TOO_MANY_REDIRECTS\", \"Maximum number of redirects exceeded\");\nvar MaxBodyLengthExceededError = createErrorType(\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\", \"Request body larger than maxBodyLength limit\");\nvar WriteAfterEndError = createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\nRedirectableRequest.prototype.abort = function () {\n  abortRequest(this._currentRequest);\n  this.emit(\"abort\");\n};\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!isString(data) && !isBuffer(data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({\n      data: data,\n      encoding: encoding\n    });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (isFunction(data)) {\n    callback = data;\n    data = encoding = null;\n  } else if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  } else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n\n  // Destroys the socket on timeout\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  }\n\n  // Sets up a timer to trigger a timeout event\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  }\n\n  // Stops a timeout from triggering\n  function clearTimer() {\n    // Clear the timeout\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    }\n\n    // Clean up all attached listeners\n    self.removeListener(\"abort\", clearTimer);\n    self.removeListener(\"error\", clearTimer);\n    self.removeListener(\"response\", clearTimer);\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  }\n\n  // Attach callback if passed\n  if (callback) {\n    this.on(\"timeout\", callback);\n  }\n\n  // Start the timer if or when the socket is opened\n  if (this.socket) {\n    startTimer(this.socket);\n  } else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  // Clean up on events\n  this.on(\"socket\", destroyOnTimeout);\n  this.on(\"abort\", clearTimer);\n  this.on(\"error\", clearTimer);\n  this.on(\"response\", clearTimer);\n  return this;\n};\n\n// Proxy all other public ClientRequest methods\n[\"flushHeaders\", \"getHeader\", \"setNoDelay\", \"setSocketKeepAlive\"].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () {\n      return this._currentRequest[property];\n    }\n  });\n});\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    } else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.slice(0, -1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request and set up its event handlers\n  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n  }\n\n  // RFC7230§5.3.1: When making a request directly to an origin server, […]\n  // a client MUST send only the absolute path […] as the request-target.\n  this._currentUrl = /^\\//.test(this._options.path) ? url.format(this._options) :\n  // When making a request to a proxy, […]\n  // a client MUST send the target URI in absolute-form […].\n  this._options.path;\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    })();\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode\n    });\n  }\n\n  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n\n  // If the response is not a redirect; return it as-is\n  var location = response.headers.location;\n  if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n    return;\n  }\n\n  // The response is a redirect, so abort the current request\n  abortRequest(this._currentRequest);\n  // Discard the remainder of the response to avoid waiting for data\n  response.destroy();\n\n  // RFC7231§6.4: A client SHOULD detect and intervene\n  // in cyclical redirections (i.e., \"infinite\" redirection loops).\n  if (++this._redirectCount > this._options.maxRedirects) {\n    this.emit(\"error\", new TooManyRedirectsError());\n    return;\n  }\n\n  // Store the request headers if applicable\n  var requestHeaders;\n  var beforeRedirect = this._options.beforeRedirect;\n  if (beforeRedirect) {\n    requestHeaders = Object.assign({\n      // The Host header was set by nativeProtocol.request\n      Host: response.req.getHeader(\"host\")\n    }, this._options.headers);\n  }\n\n  // RFC7231§6.4: Automatic redirection needs to done with\n  // care for methods not known to be safe, […]\n  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change\n  // the request method from POST to GET for the subsequent request.\n  var method = this._options.method;\n  if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n  // RFC7231§6.4.4: The 303 (See Other) status code indicates that\n  // the server is redirecting the user agent to a different resource […]\n  // A user agent can perform a retrieval request targeting that URI\n  // (a GET or HEAD request if using HTTP) […]\n  statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n    this._options.method = \"GET\";\n    // Drop a possible entity and headers related to it\n    this._requestBodyBuffers = [];\n    removeMatchingHeaders(/^content-/i, this._options.headers);\n  }\n\n  // Drop the Host header, as the redirect might lead to a different host\n  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);\n\n  // If the redirect is relative, carry over the host of the last request\n  var currentUrlParts = url.parse(this._currentUrl);\n  var currentHost = currentHostHeader || currentUrlParts.host;\n  var currentUrl = /^\\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {\n    host: currentHost\n  }));\n\n  // Determine the URL of the redirection\n  var redirectUrl;\n  try {\n    redirectUrl = url.resolve(currentUrl, location);\n  } catch (cause) {\n    this.emit(\"error\", new RedirectionError({\n      cause: cause\n    }));\n    return;\n  }\n\n  // Create the redirected request\n  debug(\"redirecting to\", redirectUrl);\n  this._isRedirect = true;\n  var redirectUrlParts = url.parse(redirectUrl);\n  Object.assign(this._options, redirectUrlParts);\n\n  // Drop confidential headers when redirecting to a less secure protocol\n  // or to a different domain that is not a superdomain\n  if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== \"https:\" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {\n    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);\n  }\n\n  // Evaluate the beforeRedirect callback\n  if (isFunction(beforeRedirect)) {\n    var responseDetails = {\n      headers: response.headers,\n      statusCode: statusCode\n    };\n    var requestDetails = {\n      url: currentUrl,\n      method: method,\n      headers: requestHeaders\n    };\n    try {\n      beforeRedirect(this._options, responseDetails, requestDetails);\n    } catch (err) {\n      this.emit(\"error\", err);\n      return;\n    }\n    this._sanitizeOptions(this._options);\n  }\n\n  // Perform the redirected request\n  try {\n    this._performRequest();\n  } catch (cause) {\n    this.emit(\"error\", new RedirectionError({\n      cause: cause\n    }));\n  }\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    function request(input, options, callback) {\n      // Parse parameters\n      if (isString(input)) {\n        var parsed;\n        try {\n          parsed = urlToOptions(new URL(input));\n        } catch (err) {\n          /* istanbul ignore next */\n          parsed = url.parse(input);\n        }\n        if (!isString(parsed.protocol)) {\n          throw new InvalidUrlError({\n            input\n          });\n        }\n        input = parsed;\n      } else if (URL && input instanceof URL) {\n        input = urlToOptions(input);\n      } else {\n        callback = options;\n        options = input;\n        input = {\n          protocol: protocol\n        };\n      }\n      if (isFunction(options)) {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }\n\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n\n    // Expose the properties on the wrapped protocol\n    Object.defineProperties(wrappedProtocol, {\n      request: {\n        value: request,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      },\n      get: {\n        value: get,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }\n    });\n  });\n  return exports;\n}\n\n/* istanbul ignore next */\nfunction noop() {/* empty */}\n\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ? /* istanbul ignore next */\n    urlObject.hostname.slice(1, -1) : urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href\n  };\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n  return options;\n}\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n  return lastValue === null || typeof lastValue === \"undefined\" ? undefined : String(lastValue).trim();\n}\nfunction createErrorType(code, message, baseClass) {\n  // Create constructor\n  function CustomError(properties) {\n    Error.captureStackTrace(this, this.constructor);\n    Object.assign(this, properties || {});\n    this.code = code;\n    this.message = this.cause ? message + \": \" + this.cause.message : message;\n  }\n\n  // Attach constructor and set default properties\n  CustomError.prototype = new (baseClass || Error)();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  return CustomError;\n}\nfunction abortRequest(request) {\n  for (var event of events) {\n    request.removeListener(event, eventHandlers[event]);\n  }\n  request.on(\"error\", noop);\n  request.abort();\n}\nfunction isSubdomain(subdomain, domain) {\n  assert(isString(subdomain) && isString(domain));\n  var dot = subdomain.length - domain.length - 1;\n  return dot > 0 && subdomain[dot] === \".\" && subdomain.endsWith(domain);\n}\nfunction isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction isBuffer(value) {\n  return typeof value === \"object\" && \"length\" in value;\n}\n\n// Exports\nmodule.exports = wrap({\n  http: http,\n  https: https\n});\nmodule.exports.wrap = wrap;","map":{"version":3,"names":["url","require","URL","http","https","Writable","assert","debug","events","eventHandlers","Object","create","forEach","event","arg1","arg2","arg3","_redirectable","emit","InvalidUrlError","createErrorType","TypeError","RedirectionError","TooManyRedirectsError","MaxBodyLengthExceededError","WriteAfterEndError","RedirectableRequest","options","responseCallback","call","_sanitizeOptions","_options","_ended","_ending","_redirectCount","_redirects","_requestBodyLength","_requestBodyBuffers","on","self","_onNativeResponse","response","_processResponse","_performRequest","prototype","abort","abortRequest","_currentRequest","write","data","encoding","callback","isString","isBuffer","isFunction","length","maxBodyLength","push","end","currentRequest","setHeader","name","value","headers","removeHeader","setTimeout","msecs","destroyOnTimeout","socket","removeListener","destroy","addListener","startTimer","_timeout","clearTimeout","clearTimer","once","method","a","b","property","defineProperty","get","host","hostname","pathname","path","searchPos","indexOf","substring","search","protocol","nativeProtocol","nativeProtocols","agents","scheme","slice","agent","request","_currentUrl","test","format","_isRedirect","i","buffers","writeNext","error","buffer","finished","statusCode","trackRedirects","location","followRedirects","responseUrl","redirects","maxRedirects","requestHeaders","beforeRedirect","assign","Host","req","getHeader","removeMatchingHeaders","currentHostHeader","currentUrlParts","parse","currentHost","currentUrl","redirectUrl","resolve","cause","redirectUrlParts","isSubdomain","responseDetails","requestDetails","err","wrap","protocols","exports","keys","wrappedProtocol","input","parsed","urlToOptions","equal","wrappedRequest","defineProperties","configurable","enumerable","writable","noop","urlObject","startsWith","hash","href","port","Number","regex","lastValue","header","undefined","String","trim","code","message","baseClass","CustomError","properties","Error","captureStackTrace","constructor","subdomain","domain","dot","endsWith","module"],"sources":["C:/Users/renzo/OneDrive/Escritorio/ULima/Ciclo 2023-0/Programacion Web/PW_Proyecto_20230_React_Mejorado/node_modules/follow-redirects/index.js"],"sourcesContent":["var url = require(\"url\");\r\nvar URL = url.URL;\r\nvar http = require(\"http\");\r\nvar https = require(\"https\");\r\nvar Writable = require(\"stream\").Writable;\r\nvar assert = require(\"assert\");\r\nvar debug = require(\"./debug\");\r\n\r\n// Create handlers that pass events from native requests\r\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\r\nvar eventHandlers = Object.create(null);\r\nevents.forEach(function (event) {\r\n  eventHandlers[event] = function (arg1, arg2, arg3) {\r\n    this._redirectable.emit(event, arg1, arg2, arg3);\r\n  };\r\n});\r\n\r\nvar InvalidUrlError = createErrorType(\r\n  \"ERR_INVALID_URL\",\r\n  \"Invalid URL\",\r\n  TypeError\r\n);\r\n// Error types with codes\r\nvar RedirectionError = createErrorType(\r\n  \"ERR_FR_REDIRECTION_FAILURE\",\r\n  \"Redirected request failed\"\r\n);\r\nvar TooManyRedirectsError = createErrorType(\r\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\r\n  \"Maximum number of redirects exceeded\"\r\n);\r\nvar MaxBodyLengthExceededError = createErrorType(\r\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\r\n  \"Request body larger than maxBodyLength limit\"\r\n);\r\nvar WriteAfterEndError = createErrorType(\r\n  \"ERR_STREAM_WRITE_AFTER_END\",\r\n  \"write after end\"\r\n);\r\n\r\n// An HTTP(S) request that can be redirected\r\nfunction RedirectableRequest(options, responseCallback) {\r\n  // Initialize the request\r\n  Writable.call(this);\r\n  this._sanitizeOptions(options);\r\n  this._options = options;\r\n  this._ended = false;\r\n  this._ending = false;\r\n  this._redirectCount = 0;\r\n  this._redirects = [];\r\n  this._requestBodyLength = 0;\r\n  this._requestBodyBuffers = [];\r\n\r\n  // Attach a callback if passed\r\n  if (responseCallback) {\r\n    this.on(\"response\", responseCallback);\r\n  }\r\n\r\n  // React to responses of native requests\r\n  var self = this;\r\n  this._onNativeResponse = function (response) {\r\n    self._processResponse(response);\r\n  };\r\n\r\n  // Perform the first request\r\n  this._performRequest();\r\n}\r\nRedirectableRequest.prototype = Object.create(Writable.prototype);\r\n\r\nRedirectableRequest.prototype.abort = function () {\r\n  abortRequest(this._currentRequest);\r\n  this.emit(\"abort\");\r\n};\r\n\r\n// Writes buffered data to the current native request\r\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\r\n  // Writing is not allowed if end has been called\r\n  if (this._ending) {\r\n    throw new WriteAfterEndError();\r\n  }\r\n\r\n  // Validate input and shift parameters if necessary\r\n  if (!isString(data) && !isBuffer(data)) {\r\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\r\n  }\r\n  if (isFunction(encoding)) {\r\n    callback = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  // Ignore empty buffers, since writing them doesn't invoke the callback\r\n  // https://github.com/nodejs/node/issues/22066\r\n  if (data.length === 0) {\r\n    if (callback) {\r\n      callback();\r\n    }\r\n    return;\r\n  }\r\n  // Only write when we don't exceed the maximum body length\r\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\r\n    this._requestBodyLength += data.length;\r\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\r\n    this._currentRequest.write(data, encoding, callback);\r\n  }\r\n  // Error when we exceed the maximum body length\r\n  else {\r\n    this.emit(\"error\", new MaxBodyLengthExceededError());\r\n    this.abort();\r\n  }\r\n};\r\n\r\n// Ends the current native request\r\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\r\n  // Shift parameters if necessary\r\n  if (isFunction(data)) {\r\n    callback = data;\r\n    data = encoding = null;\r\n  }\r\n  else if (isFunction(encoding)) {\r\n    callback = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  // Write data if needed and end\r\n  if (!data) {\r\n    this._ended = this._ending = true;\r\n    this._currentRequest.end(null, null, callback);\r\n  }\r\n  else {\r\n    var self = this;\r\n    var currentRequest = this._currentRequest;\r\n    this.write(data, encoding, function () {\r\n      self._ended = true;\r\n      currentRequest.end(null, null, callback);\r\n    });\r\n    this._ending = true;\r\n  }\r\n};\r\n\r\n// Sets a header value on the current native request\r\nRedirectableRequest.prototype.setHeader = function (name, value) {\r\n  this._options.headers[name] = value;\r\n  this._currentRequest.setHeader(name, value);\r\n};\r\n\r\n// Clears a header value on the current native request\r\nRedirectableRequest.prototype.removeHeader = function (name) {\r\n  delete this._options.headers[name];\r\n  this._currentRequest.removeHeader(name);\r\n};\r\n\r\n// Global timeout for all underlying requests\r\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\r\n  var self = this;\r\n\r\n  // Destroys the socket on timeout\r\n  function destroyOnTimeout(socket) {\r\n    socket.setTimeout(msecs);\r\n    socket.removeListener(\"timeout\", socket.destroy);\r\n    socket.addListener(\"timeout\", socket.destroy);\r\n  }\r\n\r\n  // Sets up a timer to trigger a timeout event\r\n  function startTimer(socket) {\r\n    if (self._timeout) {\r\n      clearTimeout(self._timeout);\r\n    }\r\n    self._timeout = setTimeout(function () {\r\n      self.emit(\"timeout\");\r\n      clearTimer();\r\n    }, msecs);\r\n    destroyOnTimeout(socket);\r\n  }\r\n\r\n  // Stops a timeout from triggering\r\n  function clearTimer() {\r\n    // Clear the timeout\r\n    if (self._timeout) {\r\n      clearTimeout(self._timeout);\r\n      self._timeout = null;\r\n    }\r\n\r\n    // Clean up all attached listeners\r\n    self.removeListener(\"abort\", clearTimer);\r\n    self.removeListener(\"error\", clearTimer);\r\n    self.removeListener(\"response\", clearTimer);\r\n    if (callback) {\r\n      self.removeListener(\"timeout\", callback);\r\n    }\r\n    if (!self.socket) {\r\n      self._currentRequest.removeListener(\"socket\", startTimer);\r\n    }\r\n  }\r\n\r\n  // Attach callback if passed\r\n  if (callback) {\r\n    this.on(\"timeout\", callback);\r\n  }\r\n\r\n  // Start the timer if or when the socket is opened\r\n  if (this.socket) {\r\n    startTimer(this.socket);\r\n  }\r\n  else {\r\n    this._currentRequest.once(\"socket\", startTimer);\r\n  }\r\n\r\n  // Clean up on events\r\n  this.on(\"socket\", destroyOnTimeout);\r\n  this.on(\"abort\", clearTimer);\r\n  this.on(\"error\", clearTimer);\r\n  this.on(\"response\", clearTimer);\r\n\r\n  return this;\r\n};\r\n\r\n// Proxy all other public ClientRequest methods\r\n[\r\n  \"flushHeaders\", \"getHeader\",\r\n  \"setNoDelay\", \"setSocketKeepAlive\",\r\n].forEach(function (method) {\r\n  RedirectableRequest.prototype[method] = function (a, b) {\r\n    return this._currentRequest[method](a, b);\r\n  };\r\n});\r\n\r\n// Proxy all public ClientRequest properties\r\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\r\n  Object.defineProperty(RedirectableRequest.prototype, property, {\r\n    get: function () { return this._currentRequest[property]; },\r\n  });\r\n});\r\n\r\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\r\n  // Ensure headers are always present\r\n  if (!options.headers) {\r\n    options.headers = {};\r\n  }\r\n\r\n  // Since http.request treats host as an alias of hostname,\r\n  // but the url module interprets host as hostname plus port,\r\n  // eliminate the host property to avoid confusion.\r\n  if (options.host) {\r\n    // Use hostname if set, because it has precedence\r\n    if (!options.hostname) {\r\n      options.hostname = options.host;\r\n    }\r\n    delete options.host;\r\n  }\r\n\r\n  // Complete the URL object when necessary\r\n  if (!options.pathname && options.path) {\r\n    var searchPos = options.path.indexOf(\"?\");\r\n    if (searchPos < 0) {\r\n      options.pathname = options.path;\r\n    }\r\n    else {\r\n      options.pathname = options.path.substring(0, searchPos);\r\n      options.search = options.path.substring(searchPos);\r\n    }\r\n  }\r\n};\r\n\r\n\r\n// Executes the next native request (initial or redirect)\r\nRedirectableRequest.prototype._performRequest = function () {\r\n  // Load the native protocol\r\n  var protocol = this._options.protocol;\r\n  var nativeProtocol = this._options.nativeProtocols[protocol];\r\n  if (!nativeProtocol) {\r\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\r\n    return;\r\n  }\r\n\r\n  // If specified, use the agent corresponding to the protocol\r\n  // (HTTP and HTTPS use different types of agents)\r\n  if (this._options.agents) {\r\n    var scheme = protocol.slice(0, -1);\r\n    this._options.agent = this._options.agents[scheme];\r\n  }\r\n\r\n  // Create the native request and set up its event handlers\r\n  var request = this._currentRequest =\r\n        nativeProtocol.request(this._options, this._onNativeResponse);\r\n  request._redirectable = this;\r\n  for (var event of events) {\r\n    request.on(event, eventHandlers[event]);\r\n  }\r\n\r\n  // RFC7230§5.3.1: When making a request directly to an origin server, […]\r\n  // a client MUST send only the absolute path […] as the request-target.\r\n  this._currentUrl = /^\\//.test(this._options.path) ?\r\n    url.format(this._options) :\r\n    // When making a request to a proxy, […]\r\n    // a client MUST send the target URI in absolute-form […].\r\n    this._options.path;\r\n\r\n  // End a redirected request\r\n  // (The first request must be ended explicitly with RedirectableRequest#end)\r\n  if (this._isRedirect) {\r\n    // Write the request entity and end\r\n    var i = 0;\r\n    var self = this;\r\n    var buffers = this._requestBodyBuffers;\r\n    (function writeNext(error) {\r\n      // Only write if this request has not been redirected yet\r\n      /* istanbul ignore else */\r\n      if (request === self._currentRequest) {\r\n        // Report any write errors\r\n        /* istanbul ignore if */\r\n        if (error) {\r\n          self.emit(\"error\", error);\r\n        }\r\n        // Write the next buffer if there are still left\r\n        else if (i < buffers.length) {\r\n          var buffer = buffers[i++];\r\n          /* istanbul ignore else */\r\n          if (!request.finished) {\r\n            request.write(buffer.data, buffer.encoding, writeNext);\r\n          }\r\n        }\r\n        // End the request if `end` has been called on us\r\n        else if (self._ended) {\r\n          request.end();\r\n        }\r\n      }\r\n    }());\r\n  }\r\n};\r\n\r\n// Processes a response from the current native request\r\nRedirectableRequest.prototype._processResponse = function (response) {\r\n  // Store the redirected response\r\n  var statusCode = response.statusCode;\r\n  if (this._options.trackRedirects) {\r\n    this._redirects.push({\r\n      url: this._currentUrl,\r\n      headers: response.headers,\r\n      statusCode: statusCode,\r\n    });\r\n  }\r\n\r\n  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates\r\n  // that further action needs to be taken by the user agent in order to\r\n  // fulfill the request. If a Location header field is provided,\r\n  // the user agent MAY automatically redirect its request to the URI\r\n  // referenced by the Location field value,\r\n  // even if the specific status code is not understood.\r\n\r\n  // If the response is not a redirect; return it as-is\r\n  var location = response.headers.location;\r\n  if (!location || this._options.followRedirects === false ||\r\n      statusCode < 300 || statusCode >= 400) {\r\n    response.responseUrl = this._currentUrl;\r\n    response.redirects = this._redirects;\r\n    this.emit(\"response\", response);\r\n\r\n    // Clean up\r\n    this._requestBodyBuffers = [];\r\n    return;\r\n  }\r\n\r\n  // The response is a redirect, so abort the current request\r\n  abortRequest(this._currentRequest);\r\n  // Discard the remainder of the response to avoid waiting for data\r\n  response.destroy();\r\n\r\n  // RFC7231§6.4: A client SHOULD detect and intervene\r\n  // in cyclical redirections (i.e., \"infinite\" redirection loops).\r\n  if (++this._redirectCount > this._options.maxRedirects) {\r\n    this.emit(\"error\", new TooManyRedirectsError());\r\n    return;\r\n  }\r\n\r\n  // Store the request headers if applicable\r\n  var requestHeaders;\r\n  var beforeRedirect = this._options.beforeRedirect;\r\n  if (beforeRedirect) {\r\n    requestHeaders = Object.assign({\r\n      // The Host header was set by nativeProtocol.request\r\n      Host: response.req.getHeader(\"host\"),\r\n    }, this._options.headers);\r\n  }\r\n\r\n  // RFC7231§6.4: Automatic redirection needs to done with\r\n  // care for methods not known to be safe, […]\r\n  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change\r\n  // the request method from POST to GET for the subsequent request.\r\n  var method = this._options.method;\r\n  if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\r\n      // RFC7231§6.4.4: The 303 (See Other) status code indicates that\r\n      // the server is redirecting the user agent to a different resource […]\r\n      // A user agent can perform a retrieval request targeting that URI\r\n      // (a GET or HEAD request if using HTTP) […]\r\n      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\r\n    this._options.method = \"GET\";\r\n    // Drop a possible entity and headers related to it\r\n    this._requestBodyBuffers = [];\r\n    removeMatchingHeaders(/^content-/i, this._options.headers);\r\n  }\r\n\r\n  // Drop the Host header, as the redirect might lead to a different host\r\n  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);\r\n\r\n  // If the redirect is relative, carry over the host of the last request\r\n  var currentUrlParts = url.parse(this._currentUrl);\r\n  var currentHost = currentHostHeader || currentUrlParts.host;\r\n  var currentUrl = /^\\w+:/.test(location) ? this._currentUrl :\r\n    url.format(Object.assign(currentUrlParts, { host: currentHost }));\r\n\r\n  // Determine the URL of the redirection\r\n  var redirectUrl;\r\n  try {\r\n    redirectUrl = url.resolve(currentUrl, location);\r\n  }\r\n  catch (cause) {\r\n    this.emit(\"error\", new RedirectionError({ cause: cause }));\r\n    return;\r\n  }\r\n\r\n  // Create the redirected request\r\n  debug(\"redirecting to\", redirectUrl);\r\n  this._isRedirect = true;\r\n  var redirectUrlParts = url.parse(redirectUrl);\r\n  Object.assign(this._options, redirectUrlParts);\r\n\r\n  // Drop confidential headers when redirecting to a less secure protocol\r\n  // or to a different domain that is not a superdomain\r\n  if (redirectUrlParts.protocol !== currentUrlParts.protocol &&\r\n     redirectUrlParts.protocol !== \"https:\" ||\r\n     redirectUrlParts.host !== currentHost &&\r\n     !isSubdomain(redirectUrlParts.host, currentHost)) {\r\n    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);\r\n  }\r\n\r\n  // Evaluate the beforeRedirect callback\r\n  if (isFunction(beforeRedirect)) {\r\n    var responseDetails = {\r\n      headers: response.headers,\r\n      statusCode: statusCode,\r\n    };\r\n    var requestDetails = {\r\n      url: currentUrl,\r\n      method: method,\r\n      headers: requestHeaders,\r\n    };\r\n    try {\r\n      beforeRedirect(this._options, responseDetails, requestDetails);\r\n    }\r\n    catch (err) {\r\n      this.emit(\"error\", err);\r\n      return;\r\n    }\r\n    this._sanitizeOptions(this._options);\r\n  }\r\n\r\n  // Perform the redirected request\r\n  try {\r\n    this._performRequest();\r\n  }\r\n  catch (cause) {\r\n    this.emit(\"error\", new RedirectionError({ cause: cause }));\r\n  }\r\n};\r\n\r\n// Wraps the key/value object of protocols with redirect functionality\r\nfunction wrap(protocols) {\r\n  // Default settings\r\n  var exports = {\r\n    maxRedirects: 21,\r\n    maxBodyLength: 10 * 1024 * 1024,\r\n  };\r\n\r\n  // Wrap each protocol\r\n  var nativeProtocols = {};\r\n  Object.keys(protocols).forEach(function (scheme) {\r\n    var protocol = scheme + \":\";\r\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\r\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\r\n\r\n    // Executes a request, following redirects\r\n    function request(input, options, callback) {\r\n      // Parse parameters\r\n      if (isString(input)) {\r\n        var parsed;\r\n        try {\r\n          parsed = urlToOptions(new URL(input));\r\n        }\r\n        catch (err) {\r\n          /* istanbul ignore next */\r\n          parsed = url.parse(input);\r\n        }\r\n        if (!isString(parsed.protocol)) {\r\n          throw new InvalidUrlError({ input });\r\n        }\r\n        input = parsed;\r\n      }\r\n      else if (URL && (input instanceof URL)) {\r\n        input = urlToOptions(input);\r\n      }\r\n      else {\r\n        callback = options;\r\n        options = input;\r\n        input = { protocol: protocol };\r\n      }\r\n      if (isFunction(options)) {\r\n        callback = options;\r\n        options = null;\r\n      }\r\n\r\n      // Set defaults\r\n      options = Object.assign({\r\n        maxRedirects: exports.maxRedirects,\r\n        maxBodyLength: exports.maxBodyLength,\r\n      }, input, options);\r\n      options.nativeProtocols = nativeProtocols;\r\n      if (!isString(options.host) && !isString(options.hostname)) {\r\n        options.hostname = \"::1\";\r\n      }\r\n\r\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\r\n      debug(\"options\", options);\r\n      return new RedirectableRequest(options, callback);\r\n    }\r\n\r\n    // Executes a GET request, following redirects\r\n    function get(input, options, callback) {\r\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\r\n      wrappedRequest.end();\r\n      return wrappedRequest;\r\n    }\r\n\r\n    // Expose the properties on the wrapped protocol\r\n    Object.defineProperties(wrappedProtocol, {\r\n      request: { value: request, configurable: true, enumerable: true, writable: true },\r\n      get: { value: get, configurable: true, enumerable: true, writable: true },\r\n    });\r\n  });\r\n  return exports;\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() { /* empty */ }\r\n\r\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\r\nfunction urlToOptions(urlObject) {\r\n  var options = {\r\n    protocol: urlObject.protocol,\r\n    hostname: urlObject.hostname.startsWith(\"[\") ?\r\n      /* istanbul ignore next */\r\n      urlObject.hostname.slice(1, -1) :\r\n      urlObject.hostname,\r\n    hash: urlObject.hash,\r\n    search: urlObject.search,\r\n    pathname: urlObject.pathname,\r\n    path: urlObject.pathname + urlObject.search,\r\n    href: urlObject.href,\r\n  };\r\n  if (urlObject.port !== \"\") {\r\n    options.port = Number(urlObject.port);\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction removeMatchingHeaders(regex, headers) {\r\n  var lastValue;\r\n  for (var header in headers) {\r\n    if (regex.test(header)) {\r\n      lastValue = headers[header];\r\n      delete headers[header];\r\n    }\r\n  }\r\n  return (lastValue === null || typeof lastValue === \"undefined\") ?\r\n    undefined : String(lastValue).trim();\r\n}\r\n\r\nfunction createErrorType(code, message, baseClass) {\r\n  // Create constructor\r\n  function CustomError(properties) {\r\n    Error.captureStackTrace(this, this.constructor);\r\n    Object.assign(this, properties || {});\r\n    this.code = code;\r\n    this.message = this.cause ? message + \": \" + this.cause.message : message;\r\n  }\r\n\r\n  // Attach constructor and set default properties\r\n  CustomError.prototype = new (baseClass || Error)();\r\n  CustomError.prototype.constructor = CustomError;\r\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\r\n  return CustomError;\r\n}\r\n\r\nfunction abortRequest(request) {\r\n  for (var event of events) {\r\n    request.removeListener(event, eventHandlers[event]);\r\n  }\r\n  request.on(\"error\", noop);\r\n  request.abort();\r\n}\r\n\r\nfunction isSubdomain(subdomain, domain) {\r\n  assert(isString(subdomain) && isString(domain));\r\n  var dot = subdomain.length - domain.length - 1;\r\n  return dot > 0 && subdomain[dot] === \".\" && subdomain.endsWith(domain);\r\n}\r\n\r\nfunction isString(value) {\r\n  return typeof value === \"string\" || value instanceof String;\r\n}\r\n\r\nfunction isFunction(value) {\r\n  return typeof value === \"function\";\r\n}\r\n\r\nfunction isBuffer(value) {\r\n  return typeof value === \"object\" && (\"length\" in value);\r\n}\r\n\r\n// Exports\r\nmodule.exports = wrap({ http: http, https: https });\r\nmodule.exports.wrap = wrap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}